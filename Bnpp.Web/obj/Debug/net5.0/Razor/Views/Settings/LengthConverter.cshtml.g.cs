#pragma checksum "C:\Users\mohsen\source\repos\Bnpp\Bnpp.Web\Views\Settings\LengthConverter.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "4ba0fd7e46c8ea5da2d222c2c7614730fc5b1599fde18241f8e9383bc1fa83f3"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Settings_LengthConverter), @"mvc.1.0.view", @"/Views/Settings/LengthConverter.cshtml")]
namespace AspNetCore
{
    #line hidden
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA256", @"4ba0fd7e46c8ea5da2d222c2c7614730fc5b1599fde18241f8e9383bc1fa83f3", @"/Views/Settings/LengthConverter.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA256", @"f68c967ecac2dee79a0753fe99077890945878b3e87c560bd67de47177eeb66f", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Settings_LengthConverter : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\mohsen\source\repos\Bnpp\Bnpp.Web\Views\Settings\LengthConverter.cshtml"
  
	ViewData["Title"] = "LengthConverter";
	Layout = null;

#line default
#line hidden
#nullable disable
            WriteLiteral(@"



<div class=""dcontent"">
	<div style=""margin-top: 10px; background-color: #6b8d9e; padding-top: 5px; padding-bottom: 5px; padding-right: 10px; border-radius: 5px; border: solid 1px #cccccc; background: repeating-linear-gradient(-45deg, #7fa1b3, #6b8d9e 1px, #6b8d9e 1px, #6b8d9e 20px);"">
		&nbsp;
	</div>

	<div style=""border-radius: 5px; margin-top: 5px; margin-bottom: 5px; padding: 15px; border: solid 1px #cea001; background-color: #ffe100;"">
		<table cellpadding=""3"" cellspacing=""0"">
			<tbody>
				<tr>
					<td");
            BeginWriteAttribute("style", " style=\"", 597, "\"", 605, 0);
            EndWriteAttribute();
            WriteLiteral(">\r\n\t\t\t\t\t\t<b>Unit Converter</b>\r\n\t\t\t\t\t</td>\r\n\r\n\t\t\t\t</tr>\r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t</div>\r\n\r\n\r\n\t<div id=\"iContent\">\r\n\r\n\t\t<div class=\"tab-buttons\">\r\n\t\t\t<ul>\r\n\t\t\t\t<li id=\"tab-button1\" class=\"tab-buttons-li\" ");
            WriteLiteral(@" style=""background-color: rgb(208, 208, 208); border-color: rgb(128, 128, 128); font-weight: bold;"">
					<a id=""tab-button-a1""
					   onclick=""showPage1()"" style=""cursor:pointer;color: rgb(0, 113, 158);"">
						Length Converter
					</a>
				</li>
				<li id=""tab-button2"" ");
            WriteLiteral(@" style=""background-color: rgb(240, 240, 240); border-color: rgb(192, 192, 192); font-weight: normal;"">
					<a id=""tab-buttona2"" onclick=""showPage2()"" style=""cursor:pointer;color: rgb(110, 110, 255);"">
						Temperature Converter
					</a>

				</li>
				<li id=""tab-button3"" class=""tab-buttons-li"" style=""background-color: rgb(240, 240, 240); border-color: rgb(192, 192, 192); font-weight: normal;"">
					<a id=""tab-button-a3"" onclick=""showPage3()"" style=""cursor:pointer;color: rgb(110, 110, 255);"">
						Weight Converter
					</a>
				</li>
				<li id=""tab-button3"" class=""tab-buttons-li"" style=""background-color: rgb(240, 240, 240); border-color: rgb(192, 192, 192); font-weight: normal;"">
					<a id=""tab-button-a3"" onclick=""showPage4()"" style=""cursor:pointer;color: rgb(110, 110, 255);"">
						Speed Converter
					</a>
				</li>



			</ul>

			<div style=""clear:both;""></div>
		</div>

		<div id=""tab1"" class=""tab-item"" style=""display: block;"">

			<h1 id=""iH1"">
				Length Converter
			<");
            WriteLiteral(@"/h1>

			<table cellpadding=""3"" cellspacing=""0"">
				<tbody>
					<tr>
						<td>
							Meters
						</td>
						<td>
							<input type=""number"" id=""inputMeters"" oninput=""lengthConverter(this.id,this.value)"" onchange=""lengthConverter(this.id,this.value)"" style=""direction: ltr; text-align: left;"">
						</td>
					</tr>
					<tr>
						<td>
							Feet
						</td>
						<td>
							<input type=""number"" id=""inputFeet"" oninput=""lengthConverter(this.id,this.value)"" onchange=""lengthConverter(this.id,this.value)"" style=""direction: ltr; text-align: left;"">
						</td>
					</tr>
					<tr>
						<td>
							Inches
						</td>
						<td>
							<input type=""number"" id=""inputInches"" oninput=""lengthConverter(this.id,this.value)"" onchange=""lengthConverter(this.id,this.value)"" style=""direction: ltr; text-align: left;"">
						</td>
					</tr>
					<tr>
						<td>
							cm
						</td>
						<td>
							<input type=""number"" id=""inputcm"" oninput=""lengthConverter(this.id,this.value)"" onchang");
            WriteLiteral(@"e=""lengthConverter(this.id,this.value)"" style=""direction: ltr; text-align: left;"">
						</td>
					</tr>
					<tr>
						<td>
							Yards
						</td>
						<td>
							<input type=""number"" id=""inputYards"" oninput=""lengthConverter(this.id,this.value)"" onchange=""lengthConverter(this.id,this.value)"" style=""direction: ltr; text-align: left;"">
						</td>
					</tr>
					<tr>
						<td>
							Kilometers
						</td>
						<td>
							<input type=""number"" id=""inputKilometers"" oninput=""lengthConverter(this.id,this.value)"" onchange=""lengthConverter(this.id,this.value)"" style=""direction: ltr; text-align: left;"">
						</td>
					</tr>
					<tr>
						<td>
							Miles
						</td>
						<td>
							<input type=""number"" id=""inputMiles"" oninput=""lengthConverter(this.id,this.value)"" onchange=""lengthConverter(this.id,this.value)"" style=""direction: ltr; text-align: left;"">
						</td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>
</div>

<script src=""/js/jquery.min.js""></script>

");
            WriteLiteral(@"

<script>

	function showPage1() {
		$(""#Tabs"").load(""/Settings/LengthConverter/"");
	}

	function showPage2() {
		$(""#Tabs"").load(""/Settings/TemperatureConverter/"");
	}


	function showPage3() {
		$(""#Tabs"").load(""/Settings/WeightConverter/"");
	} 

	function showPage4() {
		$(""#Tabs"").load(""/Settings/SpeedConverter/"");
	}

	// function showPage5() {
	// 	$(""#Tabs"").load(""/Maintenance/Measurements/");
#nullable restore
#line 156 "C:\Users\mohsen\source\repos\Bnpp\Bnpp.Web\Views\Settings\LengthConverter.cshtml"
                                                 Write(ViewBag.MechanicalId);

#line default
#line hidden
#nullable disable
            WriteLiteral("\");\r\n\t// }\r\n\r\n\t// function showPage6() {\r\n\t// \t$(\"#Tabs\").load(\"/Maintenance/DefectsReport/");
#nullable restore
#line 160 "C:\Users\mohsen\source\repos\Bnpp\Bnpp.Web\Views\Settings\LengthConverter.cshtml"
                                                  Write(ViewBag.MechanicalId);

#line default
#line hidden
#nullable disable
            WriteLiteral(@""");
	// }


	function lengthConverter(source, valNum) {
		valNum = parseFloat(valNum);
		var inputFeet = document.getElementById(""inputFeet"");
		var inputMeters = document.getElementById(""inputMeters"");
		var inputInches = document.getElementById(""inputInches"");
		var inputcm = document.getElementById(""inputcm"");
		var inputYards = document.getElementById(""inputYards"");
		var inputKilometers = document.getElementById(""inputKilometers"");
		var inputMiles = document.getElementById(""inputMiles"");
		if (source == ""inputFeet"") {
			inputMeters.value = (valNum / 3.2808).toFixed(2);
			inputInches.value = (valNum * 12).toFixed(2);
			inputcm.value = (valNum / 0.032808).toFixed();
			inputYards.value = (valNum * 0.33333).toFixed(2);
			inputKilometers.value = (valNum / 3280.8).toFixed(5);
			inputMiles.value = (valNum * 0.00018939).toFixed(5);
		}
		if (source == ""inputMeters"") {
			inputFeet.value = (valNum * 3.2808).toFixed(2);
			inputInches.value = (valNum * 39.370).toFixed(2);
			inputcm.");
            WriteLiteral(@"value = (valNum / 0.01).toFixed();
			inputYards.value = (valNum * 1.0936).toFixed(2);
			inputKilometers.value = (valNum / 1000).toFixed(5);
			inputMiles.value = (valNum * 0.00062137).toFixed(5);
		}
		if (source == ""inputInches"") {
			inputFeet.value = (valNum * 0.083333).toFixed(3);
			inputMeters.value = (valNum / 39.370).toFixed(3);
			inputcm.value = (valNum / 0.39370).toFixed(2);
			inputYards.value = (valNum * 0.027778).toFixed(3);
			inputKilometers.value = (valNum / 39370).toFixed(6);
			inputMiles.value = (valNum * 0.000015783).toFixed(6);
		}
		if (source == ""inputcm"") {
			inputFeet.value = (valNum * 0.032808).toFixed(3);
			inputMeters.value = (valNum / 100).toFixed(3);
			inputInches.value = (valNum * 0.39370).toFixed(2);
			inputYards.value = (valNum * 0.010936).toFixed(3);
			inputKilometers.value = (valNum / 100000).toFixed(6);
			inputMiles.value = (valNum * 0.0000062137).toFixed(6);
		}
		if (source == ""inputYards"") {
			inputFeet.value = (valNum * 3).toFixed();
			");
            WriteLiteral(@"inputMeters.value = (valNum / 1.0936).toFixed(2);
			inputInches.value = (valNum * 36).toFixed();
			inputcm.value = (valNum / 0.010936).toFixed();
			inputKilometers.value = (valNum / 1093.6).toFixed(5);
			inputMiles.value = (valNum * 0.00056818).toFixed(5);
		}
		if (source == ""inputKilometers"") {
			inputFeet.value = (valNum * 3280.8).toFixed();
			inputMeters.value = (valNum * 1000).toFixed();
			inputInches.value = (valNum * 39370).toFixed();
			inputcm.value = (valNum * 100000).toFixed();
			inputYards.value = (valNum * 1093.6).toFixed();
			inputMiles.value = (valNum * 0.62137).toFixed(2);
		}
		if (source == ""inputMiles"") {
			inputFeet.value = (valNum * 5280).toFixed();
			inputMeters.value = (valNum / 0.00062137).toFixed();
			inputInches.value = (valNum * 63360).toFixed();
			inputcm.value = (valNum / 0.0000062137).toFixed();
			inputYards.value = (valNum * 1760).toFixed();
			inputKilometers.value = (valNum / 0.62137).toFixed(2);
		}
	}

</script>

");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
